const mongoose  = require("mongoose");
const util      = require("../util/util");
const config    = require("./config");

/*** Modelos ***/
const DatoAcademico = require("../models/datoAcademico");
const Curso         = require("../models/curso");
const Certificacion = require("../models/certificacion");
const Idioma        = require("../models/idioma");
const Publicacion   = require("../models/publicacion");
const Experiencia   = require("../models/experiencia");


const dbhelper = {}

/********************************* Base de Datos ********************************/
// Conexión a la base de datos
dbhelper.connect = async () => {
  let conn = { action: "Conectar con BD", value: false, code: 500, msg: "No conectado" };
  await mongoose.connect(config.db.uri, { useNewUrlParser: true, useUnifiedTopology: true }).then(
    () => {
      conn = util.setResult(conn, true, 200, "Conectado a la BD");
    }, error => {
      conn = util.setResult(conn, false, 500, error.code + " - " + error.codeName);
    });

  return conn;
}

//Desconectar de la base de datos
dbhelper.disconnect = async () => {
  let conn = { action: "Desconectar de la BD", value: false, code: 500, msg: "No desconectado" };
  await mongoose.disconnect().then(
    () => {
      conn = util.setResult(conn, true, 200, "Desconectado de la BD");
    }, error => {
      conn = util.setResult(conn, false, 500, error.code + " - " + error.codeName);
    });

  return conn;
}
/********************************************************************************/


/******************************* Datos academicos *******************************/
// Guardar datos academicos
dbhelper.saveDatoAcademico = async (datoAcademico) => {
  let resultSave = { action: "Guardar dato academico", value: false, code: 500, msg: "No inicializado" };
  const auxDatoAcademico = new DatoAcademico(datoAcademico);

  await auxDatoAcademico.save().then(
    (DA) => {
      // resultSave = util.setResult(resultSave, true, 200, "Dato academico guardado exitosamente.");
      resultSave = { action: "Guardar dato academico", value: true, code: 200, msg: "Dato academico guardado exitosamente.", idFT: DA._id};
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el dato academico");
    });

  return resultSave;
}

// Buscar datos academicos por Cedula Profesional
dbhelper.findDatoAcademicoByCP = async (cedula_profesional) => {
  let resultFind = { action: "Buscar dato academico", value: false, code: 500, msg: "No inicializado" }

  await DatoAcademico.findOne({ cedula_profesional: cedula_profesional }).then(
    (datoAcademico) => {
      if (datoAcademico) {
        resultFind = util.setResult(resultFind, true, 200, "Cédula profesional registrada en la BD");
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Cédula profesional no registrada");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}


/* GET datoAcademico by id_docente. */
dbhelper.findDatoAcademicoByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar dato academico", value: false, code: 500, msg: "No inicializado" };

  await DatoAcademico.find({ id_docente: id_docente }).then(
    (datoAcademico) => {
      if (datoAcademico) {
        resultFind = { action: "Buscar dato academico", value: true, code: 200, msg: "Datos academicos obtenidos", datoAcademico: datoAcademico }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin datos academicos");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Actualizar un dato academico
dbhelper.updateDatoAcademicoById = async (id, datoAcademico) => {
  let resultSave = { action: "Actualizar dato academico", value: false, code: 500, msg: "No inicializado" };

  await DatoAcademico.findByIdAndUpdate(id, datoAcademico).then(
    (datoAcad) => {
      resultSave = util.setResult(resultSave, true, 200, "Dato academico actualizado");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el dato academico");
    });
  return resultSave;
} 

// Eliminar un dato académico
dbhelper.deleteDatoAcademicoById = async (id_datoacad) => {
  let resultFind = { action: "Eliminar dato academico", value: false, code: 500, msg: "No inicializado" };

  await DatoAcademico.findByIdAndDelete(id_datoacad).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Dato academico eliminado");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar el dato academico");
    }
  );
  return resultFind;
}

/********************************************************************************/


/************************************ Cursos ************************************/
// Guardar cursos
dbhelper.saveCurso = async (curso) => {
  let resultSave = { action: "Guardar curso", value: false, code: 500, msg: "No inicializado" };
  const auxCurso = new Curso(curso);

  await auxCurso.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Curso guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el curso");
    });
    
  return resultSave;
}

// Buscar curso por nombre, fecha_fin, institucion y id del docente
dbhelper.findCurso = async (nombre, fecha_fin, institucion, id_docente) => {
  let resultFind = { action: "Buscar curso", value: false, code: 500, msg: "No inicializado" };

  try {
    const curso = await Curso.findOne({ nombre: nombre, fecha_fin: fecha_fin, institucion: institucion, id_docente: id_docente });
    console.log(curso);
    if (curso) {
      resultFind = util.setResult(resultFind, true, 200, "Curso registrado en la BD");
    } else {
      resultFind = util.setResult(resultFind, false, 404, "Curso no registrada");
    }
  } catch (error) {
    resultFind = util.setResult(resultFind, false, 500, error.message + " - Error en la petición");
  }

  return resultFind;
}

// Buscar cursos por id del docente
dbhelper.findCursosByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar cursos", value: false, code: 500, msg: "No inicializado" };
  
  await Curso.find({ id_docente: id_docente }).then(
    (cursos) => {
      if (cursos) {
        resultFind = { action: "Buscar cursos", value: true, code: 200, msg: "Cursos obtenidos", cursos: cursos }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin cursos");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar un curso
dbhelper.deleteCursoById = async (id_curso) => {
  let resultFind = { action: "Eliminar curso", value: false, code: 500, msg: "No inicializado" };
  
  await Curso.findByIdAndDelete(id_curso).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Curso eliminado");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar el curso");
    });
    
  return resultFind;
}

// Actualizar un curso
dbhelper.updateCursoById = async (id, curso) => {
  let resultSave = { action: "Actualizar curso", value: false, code: 500, msg: "No inicializado" };

  await Curso.findByIdAndUpdate(id, curso).then(
    (curso) => {
      resultSave = util.setResult(resultSave, true, 200, "Curso actualizado");
    },
    error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el curso");
    }
  );
}

/********************************************************************************/


/******************************** Certificaciones *******************************/
// Guardar certificaciones
dbhelper.saveCertificacion = async (certificacion) => {
  let resultSave = { action: "Guardar certificación", value: false, code: 500, msg: "No inicializado" };
  const auxCertificacion = new Certificacion(certificacion);

  await auxCertificacion.save().then(
    (cert) => {
      resultSave = { action: "Guardar certificación", value: true, code: 200, msg: "Certificación guardada exitosamente", idFT: cert._id};
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el certificación");
    });
    
  return resultSave;
}

// Buscar curso por nombre, fecha, institucion y id del docente
dbhelper.findCertificacion = async (nombre, institucion, fecha, id_docente) => {
  let resultFind = { action: "Buscar certificación", value: false, code: 500, msg: "No inicializado" };

  try {
    const certificacion = await Certificacion.findOne({ nombre: nombre, fecha: fecha, institucion: institucion, id_docente: id_docente });
    if (certificacion) {
      resultFind = util.setResult(resultFind, true, 200, "Certificación registrada en la BD");
    } else {
      resultFind = util.setResult(resultFind, false, 404, "Certificación no registrada");
    }
  } catch (error) {
    resultFind = util.setResult(resultFind, false, 500, error.message + " - Error en la petición");
  }

  return resultFind;
}

/* GET datoAcademico by id_docente. */
dbhelper.findCertificacionByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar certificaciones", value: false, code: 500, msg: "No inicializado" };

  await Certificacion.find({ id_docente: id_docente }).then(
    (certificacion) => {
      if (certificacion) {
        resultFind = { action: "Buscar certificaciones", value: true, code: 200, msg: "Certificaciones obtenidas", certificaciones: certificacion }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin certificaciones");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar una certificaciones
dbhelper.deleteCertificacionById = async (id_cert) => {
  let resultFind = { action: "Eliminar certificación", value: false, code: 500, msg: "No inicializado" };

  await Certificacion.findByIdAndDelete(id_cert).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Certificación eliminada");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar la certificación");
    }
  );
  return resultFind;
}

// Actualizar una certificación
dbhelper.updateCertificacionById = async (id, certificacion) => {
  let resultSave = { action: "Actualizar certificación", value: false, code: 500, msg: "No inicializado" };

  await Certificacion.findByIdAndUpdate(id, certificacion).then(
    (certificacion) => {
      resultSave = util.setResult(resultSave, true, 200, "Certificación actualizada");
    },
    error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar la certificación");
    }
  );
}

/********************************************************************************/

/******************************** Idiomas *******************************/
// Guardar idomas
dbhelper.saveIdioma = async (idioma) => {
  let resultSave = { action: "Guardar idioma", value: false, code: 500, msg: "No inicializado" };
  const auxIdioma = new Idioma(idioma);

  await auxIdioma.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Idioma guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el idioma");
    });
    
  return resultSave;
}

// Buscar idioma por nombre, fecha, institucion y id del docente
dbhelper.findIdioma = async (nombre, institucion, fecha, id_docente) => {
  let resultFind = { action: "Buscar idioma", value: false, code: 500, msg: "No inicializado" };

  try {
    const idioma = await Idioma.findOne({ nombre: nombre, fecha_fin: fecha, institucion: institucion, id_docente: id_docente });
    if (idioma) {
      resultFind = util.setResult(resultFind, true, 200, "Idioma registrado en la BD");
    } else {
      resultFind = util.setResult(resultFind, false, 404, "Idioma no registrado");
    }
  } catch (error) {
    resultFind = util.setResult(resultFind, false, 500, error.message + " - Error en la petición");
  }

  return resultFind;
}

// Buscar idiomas por id del docente
dbhelper.findIdiomaByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar idiomas", value: false, code: 500, msg: "No inicializado" };

  await Idioma.find({ id_docente: id_docente }).then(
    (idiomas) => {
      if (idiomas) {
        resultFind = { action: "Buscar idiomas", value: true, code: 200, msg: "Idiomas obtenidos", idiomas: idiomas }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin idiomas");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar un idioma
dbhelper.deleteIdiomaById = async (id_idioma) => {
  let resultFind = { action: "Eliminar idioma", value: false, code: 500, msg: "No inicializado" };

  await Idioma.findByIdAndDelete(id_idioma).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Idioma eliminado");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar el idioma");
    });

  return resultFind;
}

// Actualizar un idioma
dbhelper.updateIdiomaById = async (id, idioma) => {
  let resultSave = { action: "Actualizar idioma", value: false, code: 500, msg: "No inicializado" };

  await Idioma.findByIdAndUpdate(id, idioma).then(
    (idioma) => {
      resultSave = util.setResult(resultSave, true, 200, "Idioma actualizado");
    },
    error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el idioma");
    }
  );
}

/********************************************************************************/

/******************************** Publicaciones *******************************/
// Guardar publicaciones
dbhelper.savePublicacion = async (publicacion) => {
  let resultSave = { action: "Guardar publicación", value: false, code: 500, msg: "No inicializado" };
  const auxPublicacion = new Publicacion(publicacion);

  await auxPublicacion.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Publicación guardada exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar la publicación");
    });
    
  return resultSave;
}

// Buscar publicación
dbhelper.findPublicacion = async (publicacion) => {
  let resultFind = { action: "Buscar publicación", value: false, code: 500, msg: "No inicializado" };

  try {
    const publi = await Publicacion.findOne(publicacion);
    if (publi) {
      resultFind = util.setResult(resultFind, true, 200, "Publicación registrada en la BD");
    } else {
      resultFind = util.setResult(resultFind, false, 404, "Publicación no registrada");
    }
  } catch (error) {
    resultFind = util.setResult(resultFind, false, 500, error.message + " - Error en la petición");
  }

  return resultFind;
}

// Buscar publicaciones por id del docente
dbhelper.findPublicacionByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar publicaciones", value: false, code: 500, msg: "No inicializado" };

  await Publicacion.find({ id_docente: id_docente }).then(
    (publicaciones) => {
      if (publicaciones) {
        resultFind = { action: "Buscar publicaciones", value: true, code: 200, msg: "Publicaciones obtenidas", publicaciones: publicaciones }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin publicaciones");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar una publicación
dbhelper.deletePublicacionById = async (id_publicacion) => {
  let resultFind = { action: "Eliminar publicación", value: false, code: 500, msg: "No inicializado" };

  await Publicacion.findByIdAndDelete(id_publicacion).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Publicación eliminada");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar la publicación");
    });

  return resultFind;
}

/********************************************************************************/

/******************************** Experiencia *******************************/
// Guardar experiencia profesional
dbhelper.saveExperiencia = async (experiencia) => {
  let resultSave = { action: "Guardar experiencia profesional", value: false, code: 500, msg: "No inicializado" };
  const auxExperiencia = new Experiencia(experiencia);

  await auxExperiencia.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Experiencia profesional guardada exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar la experiencia profesional");
    });
    
  return resultSave;
}

// Buscar experiencia profesional
dbhelper.findExperiencia = async (experiencia) => {
  let resultFind = { action: "Buscar experiencia", value: false, code: 500, msg: "No inicializado" };

  try {
    const exp = await Publicacion.findOne(experiencia);
    if (exp) {
      resultFind = util.setResult(resultFind, true, 200, "Experiencia registrada en la BD");
    } else {
      resultFind = util.setResult(resultFind, false, 404, "Experiencia no registrada");
    }
  } catch (error) {
    resultFind = util.setResult(resultFind, false, 500, error.message + " - Error en la petición");
  }

  return resultFind;
}

// Buscar experiencias profesionales por id del docente
dbhelper.findExperienciaByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar experiencias profesionales", value: false, code: 500, msg: "No inicializado" };

  await Experiencia.find({ id_docente: id_docente }).then(
    (experiencias) => {
      if (experiencias) {
        resultFind = { action: "Buscar experiencias profesionales", value: true, code: 200, msg: "Experiencias profesionales obtenidas", experiencias: experiencias }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin experiencias profesionales");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar una experiencia profesional
dbhelper.deleteExperienciaById = async (id_exp) => {
  let resultFind = { action: "Eliminar experiencia profesional", value: false, code: 500, msg: "No inicializado" };

  await Experiencia.findByIdAndDelete(id_exp).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Experiencia profesional eliminada");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar la experiencia profesional");
    });

  return resultFind;
}

module.exports = dbhelper;
