const mongoose  = require("mongoose");
const util      = require("../util/util");
const config    = require("./config");

/*** Modelos ***/
const DatoAcademico = require("../models/datoAcademico");
const Curso         = require("../models/curso");
const Certificacion = require("../models/certificacion");
const Idioma        = require("../models/idioma");


const dbhelper = {}

/********************************* Base de Datos ********************************/
// Conexión a la base de datos
dbhelper.connect = async () => {
  let conn = { action: "Conectar con BD", value: false, code: 500, msg: "No conectado" };
  await mongoose.connect(config.db.uri, { useNewUrlParser: true, useUnifiedTopology: true }).then(
    () => {
      conn = util.setResult(conn, true, 200, "Conectado a la BD");
    }, error => {
      conn = util.setResult(conn, false, 500, error.code + " - " + error.codeName);
    });

  return conn;
}

//Desconectar de la base de datos
dbhelper.disconnect = async () => {
  await mongoose.disconnect();
}
/********************************************************************************/


/******************************* Datos academicos *******************************/
// Guardar datos academicos
dbhelper.saveDatoAcademico = async (datoAcademico) => {
  let resultSave = { action: "Guardar dato academico", value: false, code: 500, msg: "No inicializado" };
  const auxDatoAcademico = new DatoAcademico(datoAcademico);

  await auxDatoAcademico.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Dato academico guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el dato academico");
    });

  return resultSave;
}

// Buscar datos academicos por Cedula Profesional
dbhelper.findDatoAcademicoByCP = async (cedula_profesional) => {
  let resultFind = { action: "Buscar dato academico", value: false, code: 500, msg: "No inicializado" }

  await DatoAcademico.findOne({ cedula_profesional: cedula_profesional }).then(
    (datoAcademico) => {
      if (datoAcademico) {
        resultFind = util.setResult(resultFind, true, 200, "Cédula profesional registrada en la BD");
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Cédula profesional no registrada");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}


/* GET datoAcademico by id_docente. */
dbhelper.findDatoAcademicoByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar dato academico", value: false, code: 500, msg: "No inicializado" };

  await DatoAcademico.find({ id_docente: id_docente }).then(
    (datoAcademico) => {
      if (datoAcademico) {
        resultFind = { action: "Buscar dato academico", value: true, code: 200, msg: "Datos academicos obtenidos", datoAcademico: datoAcademico }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin datos academicos");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

/* Actualizar un dato academico
dbhelper.updateDatoAcademico = async (dato) => {
  let resultSave = { action: "Actualizar dato academico", value: false, code: 500, msg: "No inicializado" };

  await DatoAcademico.findByIdAndUpdate(dato._id, dato).then(
    (datoAcademico) => {
      resultSave = util.setResult(resultSave, true, 200, "Dato academico actualizado");
      resultSave.datoAcademico = datoAcademico;
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el docente");
    });
  return resultSave;
} */

// Eliminar un dato académico
dbhelper.deleteDatoAcademicoById = async (id_datoacad) => {
  let resultFind = { action: "Eliminar dato academico", value: false, code: 500, msg: "No inicializado" };

  await DatoAcademico.findByIdAndDelete(id_datoacad).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Dato academico eliminado");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar el dato academico");
    }
  );
  return resultFind;
}

/********************************************************************************/


/************************************ Cursos ************************************/
// Guardar cursos
dbhelper.saveCurso = async (curso) => {
  let resultSave = { action: "Guardar curso", value: false, code: 500, msg: "No inicializado" };
  const auxCurso = new Curso(curso);

  await auxCurso.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Curso guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el curso");
    });
    
  return resultSave;
}

// Buscar curso por nombre, fecha_fin, institucion y id del docente
dbhelper.findCurso = async (nombre, fecha_fin, institucion, id_docente) => {
  let resultFind = { action: "Buscar curso", value: false, code: 500, msg: "No inicializado" };

  await Curso.find({ nombre: nombre, fecha_fin: fecha_fin, institucion: institucion, id_docente: id_docente }).then(
    (curso) => {
      if (curso) {
        resultFind = util.setResult(resultFind, true, 200, "Curso registrado en la BD");
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Curso no registrado")
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Buscar cursos por id del docente
dbhelper.findCursosByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar cursos", value: false, code: 500, msg: "No inicializado" };
  
  await Curso.find({ id_docente: id_docente }).then(
    (cursos) => {
      if (cursos) {
        resultFind = { action: "Buscar cursos", value: true, code: 200, msg: "Cursos obtenidos", cursos: cursos }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin cursos");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar un curso
dbhelper.deleteCursoById = async (id_curso) => {
  let resultFind = { action: "Eliminar curso", value: false, code: 500, msg: "No inicializado" };
  
  await Curso.findByIdAndDelete(id_curso).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Curso eliminado");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar el curso");
    });
    
  return resultFind;
}

/********************************************************************************/


/******************************** Certificaciones *******************************/
// Guardar certificaciones
dbhelper.saveCertificacion = async (certificacion) => {
  let resultSave = { action: "Guardar certificación", value: false, code: 500, msg: "No inicializado" };
  const auxCertificacion = new Certificacion(certificacion);

  await auxCertificacion.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Certificación guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el certificación");
    });
    
  return resultSave;
}

// Buscar curso por nombre, fecha, institucion y id del docente
dbhelper.findCertificacion = async (nombre, institucion, fecha, id_docente) => {
  let resultFind = { action: "Buscar certificación", value: false, code: 500, msg: "No inicializado" };

  await Certificacion.find({ nombre: nombre, fecha: fecha, institucion: institucion, id_docente: id_docente }).then(
    (certificacion) => {
      if (certificacion) {
        resultFind = util.setResult(resultFind, true, 200, "Certificación registrado en la BD");
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Certificación no registrado");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

/* GET datoAcademico by id_docente. */
dbhelper.findCertificacionByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar certificaciones", value: false, code: 500, msg: "No inicializado" };

  await Certificacion.find({ id_docente: id_docente }).then(
    (certificacion) => {
      if (certificacion) {
        resultFind = { action: "Buscar certificaciones", value: true, code: 200, msg: "Certificaciones obtenidas", datoAcademico: datoAcademico }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin certificaciones");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar una certificaciones
dbhelper.deleteCertificacionById = async (id_cert) => {
  let resultFind = { action: "Eliminar certificación", value: false, code: 500, msg: "No inicializado" };

  await Certificacion.findByIdAndDelete(id_cert).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Certificación eliminada");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar la certificación");
    }
  );
  return resultFind;
}

/********************************************************************************/

/******************************** Idiomas *******************************/
// Guardar idomas
dbhelper.saveIdioma = async (idioma) => {
  let resultSave = { action: "Guardar idioma", value: false, code: 500, msg: "No inicializado" };
  const auxIdioma = new Idioma(idioma);

  await auxIdioma.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Idioma guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el idioma");
    });
    
  return resultSave;
}

// Buscar idiomas por id del docente
dbhelper.findIdiomaByIdDocente = async (id_docente) => {
  let resultFind = { action: "Buscar idiomas", value: false, code: 500, msg: "No inicializado" };

  await Idioma.find({ id_docente: id_docente }).then(
    (idiomas) => {
      if (idiomas) {
        resultFind = { action: "Buscar idiomas", value: true, code: 200, msg: "Idiomas obtenidos", idiomas: idiomas }
      } else {
        resultFind = util.setResult(resultFind, true, 200, "Sin idiomas");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    });

  return resultFind;
}

// Eliminar un idioma
dbhelper.deleteIdiomaById = async (id_idioma) => {
  let resultFind = { action: "Eliminar idioma", value: false, code: 500, msg: "No inicializado" };

  await Idioma.findByIdAndDelete(id_idioma).then(
    () => {
      resultFind = util.setResult(resultFind, true, 200, "Idioma eliminado");
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error al eliminar el idioma");
    });
    
  return resultFind;
}

module.exports = dbhelper;
