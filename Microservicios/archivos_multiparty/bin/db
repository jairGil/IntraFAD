const mongoose = require("mongoose");
const util = require("../util/util");
const config = require("./config");
const Docente = require("../model/docente");
const DatoAcademico = require("../model/datoAcademico");
const Curso         = require("../model/curso");
const Certificacion = require("../model/certificacion");
const Idioma = require("../model/idioma");


const dbhelper = {}
// ConexiÃ³n a la base de datos
dbhelper.connect = async () => {
  let conn = { action: "Conectar con BD", value: false, code: 500, msg: "No conectado" };
  await mongoose.connect(config.db.uri, { useNewUrlParser: true, useUnifiedTopology: true }).then(
    () => {
      conn = util.setResult(conn, true, 200, "Conectado a la BD");
    }, error => {
      console.log(error);
      conn = util.setResult(conn, false, 500, error.code + " - " + error.codeName);
    });

  return conn;
}

dbhelper.setImagen = async (docenteId, fileName) => {
  let resultSave = { action: "Actualizar imagen", value: false, code: 500, msg: "No inicializado" }

  await Docente.findByIdAndUpdate(docenteId, { img: fileName }).then(
    (docente) => {
      resultSave = { action: "Actualizar imagen", value: true, code: 200, msg: "Imagen actualizada", docente: docente }
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar la imagen");
    }
  );
  
  return resultSave;
}

dbhelper.setPDF = async (docenteId, tipo, fileName) => {
  let resultSave = { action: "Actualizar PDF", value: false, code: 500, msg: "No inicializado" };
  
  switch (tipo) { 
    case "rfc":
      await Docente.findByIdAndUpdate(docenteId, { doc_rfc: fileName }).then(
        (docente) => {
            resultSave = { action: "Actualizar PDF", value: true, code: 200, msg: "PDF actualizado", docente: docente }
          }, error => {
            resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el PDF");
          }
        );
      break;
    case "curp":
      await Docente.findByIdAndUpdate(docenteId, { doc_curp: fileName }).then(
        (docente) => {
            resultSave = { action: "Actualizar PDF", value: true, code: 200, msg: "PDF actualizado", docente: docente }
          }, error => {
            resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el PDF");
          }
        );
      break;
    case "gradoAcad":
      await DatoAcademico.findByIdAndUpdate(docenteId, { doc_grado_acad: fileName }).then(
        (datoAcad) => {
          resultSave = { action: "Actualizar PDF", value: true, code: 200, msg: "PDF actualizado", datoAcad: datoAcad }
        }, error => {
          resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el PDF");
        }
      );
      break;
    case "cedulaProf":
      await DatoAcademico.findByIdAndUpdate(docenteId, { doc_cedula_prof: fileName }).then(
        (datoAcad) => {
          resultSave = { action: "Actualizar PDF", value: true, code: 200, msg: "PDF actualizado", datoAcad: datoAcad }
        }, error => {
          resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el PDF");
        }
      );
      break;
    case "certificacion":
      await Certificacion.findByIdAndUpdate(docenteId, { constancia: fileName }).then(
        (certificacion) => {
          resultSave = { action: "Actualizar PDF", value: true, code: 200, msg: "PDF actualizado", certificacion: certificacion }
        }, error => {
          resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el PDF");
        }
      );
      break;
    case "cursos":
      await Curso.findByIdAndUpdate(docenteId, { constancia: fileName }).then(
        (curso) => {
          resultSave = { action: "Actualizar PDF", value: true, code: 200, msg: "PDF actualizado", curso: curso }
        }, error => {
          resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el PDF");
        }
      );
      break;
    default:
      resultSave = util.setResult(resultSave, false, 500, "Eso no existe bro :v");
  }

  return resultSave;
}

//Desconectar de la base de datos
dbhelper.disconnect = async () => {
  await mongoose.disconnect();
}


module.exports = dbhelper;