const mongoose  = require("mongoose");
const config    = require("./config");
const util      = require("../util/util");

const Docente   = require("../models/docente");

const dbhelper = {}
// Conexión a la base de datos
dbhelper.connect = async () => {
  let conn = { action: "Conectar con BD", value: false, code: 500, msg: "No conectado" };
  await mongoose.connect(config.db.uri, { useNewUrlParser: true, useUnifiedTopology: true }).then(
    () => {
      conn = util.setResult(conn, true, 200, "Conectado a la BD");
    }, error => {
      conn = util.setResult(conn, false, 500, error.code + " - " + error.codeName);
    });

  return conn;
}

// Guardar un docente
dbhelper.saveDocente = async (docente) => {
  let resultSave = { action: "Guardar docente", value: false, code: 500, msg: "No inicializado" }
  const auxDocente = new Docente(docente);

  /** FECHA DE SOLICITUD DE REGISTRO */
  const tiempoTranscurrido = Date.now();
  const hoy = new Date(tiempoTranscurrido);
  

  auxDocente.fechaRegistro = hoy.toUTCString();

  await auxDocente.save().then(
    () => {
      resultSave = util.setResult(resultSave, true, 200, "Docente guardado exitosamente.");
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el docente");
    }
  );

  return resultSave;
}

// Buscar docente por email
dbhelper.findDocenteByEmail = async (correo_personal, action) => {
  let resultFind = { action: action, value: false, code: 500, msg: "No inicializado" }

  await Docente.findOne({ correo_personal: correo_personal }).then(
    (docente) => {
      if (docente) {
        resultFind = util.setResult(resultFind, true, 200, "Correo electrónico registrado en la BD");
        if (action === "login")
        resultFind = { action: action, value: true, code: 200, msg: "Docente enviado", docente: docente }
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Correo electrónico no registrado");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    }
  );
  return resultFind;
}

// Buscar docente por email institucional
dbhelper.findDocenteByInstitutionalEmail = async (correo_institucional, action) => {
  let resultFind = { action: action, value: false, code: 500, msg: "No inicializado" }

  await Docente.findOne({ correo_institucional: correo_institucional }).then(
    (docente) => {
      if (docente) {
        resultFind = util.setResult(resultFind, true, 200, "Correo electrónico registrado en la BD");
        if (action === "login")
        resultFind = { action: action, value: true, code: 200, msg: "Docente enviado", docente: docente }
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Correo electrónico no registrado");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    }
  );
  return resultFind;
}

// Buscar docente por id
dbhelper.findDocenteById = async (id_docente, action) => {
  let resultFind = { action: action, value: false, code: 500, msg: "No inicializado" }

  await Docente.findById(id_docente).then(
    (docente) => {
      if (docente) {
        resultFind = util.setResult(resultFind, true, 200, "Correo electrónico registrado en la BD");
        if (action === "login" || action === "getDocente")
        resultFind = { action: action, value: true, code: 200, msg: "Docente enviado", docente: docente }
      } else {
        resultFind = util.setResult(resultFind, false, 400, "Correo electrónico no registrado");
      }
    }, error => {
      resultFind = util.setResult(resultFind, false, 500, error + " - Error en la petición");
    }
  );
  return resultFind;
}


// Actualizar un docente
dbhelper.updateDocente = async (docente) => {
  docente.doc_rfc = docente.doc_rfc.replaceAll("/", "|");
  docente.doc_curp = docente.doc_curp.replaceAll("/", "|");

  docente.curp = docente.curp.toUpperCase();
  docente.rfc = docente.rfc.toUpperCase();

  console.log(JSON.stringify(docente));
  let resultSave = { action: "Actualizar docente", value: false, code: 500, msg: "No inicializado" }

  await Docente.findByIdAndUpdate(docente._id, docente, { new: true }).then(
    (docente) => {
      resultSave = { action: "Actualizar docente", value: true, code: 200, msg: "Docente actualizado", docente: docente }
    }, error => {
      resultSave = util.setResult(resultSave, false, 500, error + " - Error al guardar el docente");
    }
  );
  return resultSave;
}

//Desconectar de la base de datos
dbhelper.disconnect = async () => {
  let resultDisconnect = { action: "Desconectar de la BD", value: false, code: 500, msg: "No desconectado" };
  await mongoose.disconnect().then(
    () => {
      resultDisconnect = util.setResult(resultDisconnect, true, 200, "Desconectado de la BD");
    }, error => {
      resultDisconnect = util.setResult(resultDisconnect, false, 500, error.code + " - " + error.codeName);
    });

  return resultDisconnect;
}


module.exports = dbhelper;